Detect loop--------------------------------------------

Node p = head;
        Node q = head;
        while(p.next!=null && p.next.next!=null)
        {
            q = q.next;
            p=p.next.next;
            
            if(p==q)
            {
                return true;
            }
            
        }
        return false;
        

Nth node from end of linked list---------------------------

Node p = head;
    	int k = 0;
    	
    	while(p!=null)
    	{
    	    k++;
    	    p = p.next;
    	}
    	if(n>k)
    	{
    	    return -1;
    	}
    	p = head;
    	for(int i=0;i<k-n;i++)
    	{
    	    p = p.next;
    	}
    	    return p.data;
    	    
Nth node from end of linked list---------------------------  

Delete without head pointer-----------------------------

void deleteNode(Node del)
    {
         // Your code here
         del.data = del.next.data;
         del.next = del.next.next;
    }



Modular Node--------------------------------------------
"A modular node is the last node of the linked list whose Index is divisible by the number k, i.e. i%k==0."

public static int moduarNode(Node head, int k)
    {
        // add your code here
        Node temp = head;
       int i = 1;
       int res = -1;
       while(temp != null)
       {
           if(i%k == 0)
           {
              res = temp.data; 
           }
           temp = temp.next;
           i++;
       }
       return res;
    }
    



Find the Sum of Last N nodes of the Linked List------------------------------------------------

public int sum(Node head, int k){
      //write code here
      Node p = head;
      int n=0;
      int sum =0;
      while(p!=null)
      {
          n++;
          p = p.next;
      }
      
      p = head;
      for(int i =0;i<n-k;i++)
      {
          p = p.next;
      }
      while(p!=null)
      {
          sum = sum+p.data;
          p = p.next;
          
      }
      return sum;
    }
    
    


Pairwise swap elements of a linked list------------------------------------------------------

public Node pairwiseSwap(Node head)
    {
        // code here
        Node forword  = head.next, backword = head, tempBack = null, tempForword = null;
        
        while(backword != null && forword != null){
            tempForword = forword;
            tempBack = backword;
    
            tempBack.next = tempForword.next;
            tempForword.next = tempBack;
            
            if(backword == head) head = tempForword;
            
            backword = tempBack.next;
            if(backword != null && backword.next != null) {
                forword = backword.next;
                tempBack.next = forword;
            } else {
                forword = null;
            }
        }
        return head;
    }





Insert in a sorted LL-----------------------------------------------------------------

Node sortedInsert(Node head1, int key) {
        // Add your code here.
      Node newNode = new Node(key);
        if(head1.data>key)
        {
            newNode.next = head1;
            head1 = newNode;
            return head1;
        }
        Node p = head1;
        Node t = head1;
        while(p!=null)
        {
            if(p.data>key)
            {
                newNode.next = p;
                t.next = newNode;
                return head1;
            }
            t = p;
            p = p.next;
        }
        t.next = newNode;
        
        return head1;
        }
     


Count Pairs whose sum is equal to X------------------------------------------------

public static int countPairs(LinkedList<Integer> head1, LinkedList<Integer> head2,
                          int x) {
        // add your code here
        HashSet<Integer> ll = new HashSet<>();
        int count = 0;
        
        for(int i=0;i<head1.size();i++)
        {
            ll.add(x-head1.get(i));
        }
        
        for(int i=0;i<head2.size();i++)
        {
            if(ll.contains(head2.get(i)))
            count++;
        }
        
        return count;
    }



         
Intersection of two sorted Linked lists====================================================================

public static Node findIntersection(Node head1, Node head2)
    {
        // code here.
        Node dummy = new Node(0);
        Node temp = dummy;
        Node p1 = head1;
        Node p2 = head2;
        
        while(p1 != null && p2 != null)
        {
            if(p1.data < p2.data)
            p1 = p1.next;
            else if(p1.data > p2.data)
            p2 = p2.next;
            else{
                Node node = new Node(p1.data);
                temp.next = node;
                temp = temp.next;
                p1 = p1.next;
                p2 = p2.next;
            }
        }
        return dummy.next;
       
    }
    
    
Remove every k'th node======================================================================

    
    Node delete(Node head, int k)
    {
	// Your code here
	Node p = head; 
	Node q = null;
	    int a = 1;
	    if(k == 1) 
	    return null;
	    while(p!= null){
	        if(a == k)
	        {
	            a = 1;
	            q.next = p.next;
	            if(q!= null)
	            {
	                p = q.next;
	            }
	            else 
	            {
	                p = null;
	            }
	        }
	        else 
	        {
	            q = p;
	            p = p.next;
	            a++;
	        }
	    }
	    return head;
    }
    

















































































































   
	    